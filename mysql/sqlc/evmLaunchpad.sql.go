// Code generated by sqlc. DO NOT EDIT.
// source: evmLaunchpad.sql

package launchpad

import (
	"context"
	"database/sql"
)

const createEvmLaunchpad = `-- name: CreateEvmLaunchpad :execresult
INSERT INTO evmLaunchpad (
    eoa_address,
    contract_address,
    network_chain_id,
    price,
    meta_data_uri
) VALUES (
   ?, ?, ?, ?, ?
)
`

type CreateEvmLaunchpadParams struct {
	EoaAddress      string `json:"eoa_address"`
	ContractAddress string `json:"contract_address"`
	NetworkChainID  int32  `json:"network_chain_id"`
	Price           int32  `json:"price"`
	MetaDataUri     string `json:"meta_data_uri"`
}

func (q *Queries) CreateEvmLaunchpad(ctx context.Context, arg CreateEvmLaunchpadParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createEvmLaunchpad,
		arg.EoaAddress,
		arg.ContractAddress,
		arg.NetworkChainID,
		arg.Price,
		arg.MetaDataUri,
	)
}

const getMyAllLaunchpad = `-- name: GetMyAllLaunchpad :many
SELECT id, eoa_address, contract_address, network_chain_id, price, meta_data_uri, created_at FROM evmLaunchpad
WHERE eoa_address = ? LIMIT 1
`

func (q *Queries) GetMyAllLaunchpad(ctx context.Context, eoaAddress string) ([]EvmLaunchpad, error) {
	rows, err := q.db.QueryContext(ctx, getMyAllLaunchpad, eoaAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EvmLaunchpad{}
	for rows.Next() {
		var i EvmLaunchpad
		if err := rows.Scan(
			&i.ID,
			&i.EoaAddress,
			&i.ContractAddress,
			&i.NetworkChainID,
			&i.Price,
			&i.MetaDataUri,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
